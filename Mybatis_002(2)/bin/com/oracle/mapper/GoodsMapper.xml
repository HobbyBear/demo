<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oracle.mapper.GoodsMapper">
	<resultMap type="Goods" id="baseResult">
		<id property="goodsId" column="goods_id" javaType="int"/>
		<result property="goodsName" column="goods_name" javaType="java.lang.String"/>
		<result property="goodsPrice" column="goods_price" javaType="float"/>
		<result property="goodsNum" column="goods_num" javaType="int"/>
		<result property="goodsDate" column="goods_date" javaType="java.util.Date"/>
		<result property="goodsType" column="goods_type" javaType="int"/>
		<!-- 关联对象:获取的方式1,sql语句是连接查询 -->
		<result property="type1.typeId" column="type_id" javaType="int"/>
		<result property="type1.typeName" column="type_name" javaType="string"/>
		<!-- 关联对象：获取的方式2，连接查询，直接使用关联对象的已用的映射结果 -->
		<association property="type2" javaType="com.oracle.mapper.GoodsType"
		resultMap="com.oracle.mapper.GoodsTypeMapper.baseResult"></association>
		<!-- 关联对象:获取的方式3,调用关联对象的单独的查询方式（要求关联对象中有findById） -->
		<association property="type3"  javaType="com.oracle.mapper.GoodsType" 
		select="com.oracle.mapper.GoodsTypeMapper.findById" column="goods_type">
		</association>
	</resultMap>
	
	<!-- 添加id主键的方式 -->
	<!-- <insert id="insertUser" parameterType="cn.atcast.pojo.User">
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select
			LAST_INSERT_ID()
		</selectKey>
		insert into user (username,birthday,sex,address)
		values(#{username},#{birthday},#{sex},#{address})
	</insert> -->
	
	
	<!-- 添加uuid主键的方式 -->
	<!-- <insert id="insertUser" parameterType="cn.atcast.pojo.User">
		<selectKey resultType="java.lang.String" order="BEFORE"
			keyProperty="id">
			select uuid()
		</selectKey>
		insert into user(id,username,birthday,sex,address)
		values(#{id},#{username},#{birthday},#{sex},#{address})
	</insert> -->
	
	<select id="findAll"  resultMap="baseResult">
		select * from goods 
	</select>


	<select id="findByTypeId" parameterType="int" resultMap="baseResult">
		select * from goods where goods_type = #{id}
	</select>
	
	<select id="findById" parameterType="int" resultMap="baseResult">
		select * from goods where goods_id = #{id}
	</select>
	
	<select id="findById2" parameterType="int" resultMap="baseResult">
		select * from goods g,goods_type t
		 where g.goods_type=t.type_id and goods_id=#{id}
	</select>
	
	<select id="findById3" parameterType="int" resultMap="baseResult">
		select * from goods g,goods_type t
		 where g.goods_type=t.type_id and goods_id=#{id}
	</select>
	
	<select id="findById4" parameterType="int" resultMap="baseResult">
		select * from goods where goods_id = #{id}
	</select>
	
	<update id="update1" parameterType="Goods">
		update goods
		set goods_name=#{goodsName},
		goods_price=#{goodsPrice},
		goods_num=#{goodsNum},
		goods_date=#{goodsDate},
		goods_type=#{goodsType}
		where goods_id=#{goodsId}		
	</update>
	
	<update id="update" parameterType="Goods">
		update goods
		<set>
			<if test="goodsName!=null">goods_name=#{goodsName},</if>
			<if test="goodsPrice!=null">goods_price=#{goodsPrice},</if>
			<if test="goodsNum!=null">goods_num=#{goodsNum},</if>
			<if test="goodsDate!=null">goods_date=#{goodsDate},</if>
			<if test="goodsType!=null">goods_type=#{goodsType},</if>
			<!-- <if test="type1!=null and type1.typeId!=null">goods_type=#{type1.typeId}</if> -->
		</set>		
		where goods_id=#{goodsId}		
	</update>
	
	<select id="findByCondtion" parameterType="com.oracle.vo.SearchVO" resultMap="baseResult">
		select * from goods
		<where>
			<if test="maxPrice!=null">and goods_price&lt;=#{maxPrice}</if>
			<if test="minPrice!=null">and goods_price&gt;=#{minPrice}</if>
			<if test="maxNum!=null">and goods_num&lt;=#{maxNum}</if>
			<if test="minNum!=null">and goods_num&gt;=#{minNum}</if>
			<if test="type!=null">and goods_type=#{type}</if>
			<if test="name!=null">and goods_name like '%${name}%'</if>
		</where>
	</select>
	<delete id="delete" parameterType="java.util.ArrayList">
		delete from goods where goods_id in
		<foreach collection="list" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
	
	<insert id="save" parameterType="java.util.ArrayList">
		insert into goods (goods_name,goods_num)   values
	   	<foreach collection="list" item="g" separator=",">
	   		(#{g.goodsName},#{g.goodsNum})
	   	</foreach>
	</insert>
	
</mapper>
















